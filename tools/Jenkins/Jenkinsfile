pipeline{
  agent any

    environment{
      TOOLS = 'c2mvws-tools'
      DEV = 'c2mvws-dev'
      TEST = 'c2mvws-test'
      PROD = 'c2mvws-prod'

      REPO_NAME = 'educ-soam-api'
      OWNER = 'bcgov'
      JOB_NAME = 'master'
      TAG = 'dev'

      APP_NAME = 'soam-api'
      APP_DOMAIN = 'pathfinder.gov.bc.ca'

      SOURCE_REPO_RAW = 'https://github.com/${OWNER}/${REPO_NAME}/master'
      SOURCE_REPO_REF = 'master'
      SOURCE_REPO_URL = 'https://github.com/${OWNER}/${REPO_NAME}.git'

      TOOLS_HOST_ROUTE = "${APP_NAME}-${TOOLS}.${APP_DOMAIN}"
      DEV_HOST_ROUTE = "${APP_NAME}-${DEV}.${APP_DOMAIN}"
      TEST_HOST_ROUTE = "${APP_NAME}-${TEST}.${APP_DOMAIN}"
      PROD_HOST_ROUTE = "${APP_NAME}-${PROD}.${APP_DOMAIN}"
  }
  stages{
      stage('Build PEN Request API'){
        steps{
          script{
            openshift.withCluster(){
              openshift.withProject(){
                def bcApi = openshift.process('-f', 'tools/openshift/api.bc.yaml')
                openshift.apply(bcApi).narrow('bc').startBuild('-w').logs('-f')
              }
            }
          }
        }
        post {
          success {
              echo 'Cleanup BuildConfigs'
              script {
                  openshift.withCluster() {
                    openshift.withProject(TOOLS) {
                      def bcApi = openshift.selector('bc', "${REPO_NAME}-${JOB_NAME}")

                      if(bcApi.exists()) {
                          echo "Removing BuildConfig ${REPO_NAME}-${JOB_NAME}"
                          bcApi.delete()
                      }
                    }
                  }
              }
          }
          failure {
              echo 'Build stage failed'
          }
        }
      }
      stage('Promote to DEV') {
       steps {
          script {
            openshift.withCluster() {
              openshift.withProject(DEV) {
                echo "Tagging image"
                openshift.tag("${TOOLS}/${REPO_NAME}-${JOB_NAME}:latest", "${REPO_NAME}-${JOB_NAME}:${TAG}")
                def dcTemplate = openshift.process('-f',
                  'tools/openshift/api.dc.yaml',
                  "REPO_NAME=${REPO_NAME}",
                  "JOB_NAME=${JOB_NAME}",
                  "NAMESPACE=${DEV}",
                  "APP_NAME=${APP_NAME}",
                  "HOST_ROUTE=${DEV_HOST_ROUTE}",
                  "TAG=${TAG}"
                )

                echo "Applying Deployment ${REPO_NAME}"
                def dc = openshift.apply(dcTemplate).narrow('dc')

                echo "Waiting for deployment to roll out"
                // Wait for deployments to roll out
                timeout(10) {
                  dc.rollout().status('--watch=true')
                }
              }
            }
          }
      }
  
  }
}

  def deployStage(String stageEnv, String projectEnv, String hostRouteEnv) {
    if (!stageEnv.equalsIgnoreCase('Dev')) {
      input("Deploy to ${projectEnv}?")
    }

    openshift.withCluster() {
      openshift.withProject(projectEnv) {
        if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
          echo "DEBUG - Using project: ${openshift.project()}"
        }
        echo "Tagging Image ${REPO_NAME}-backend:${JOB_NAME}..."
        openshift.tag("${TOOLS}/${REPO_NAME}-backend:${JOB_NAME}", "${REPO_NAME}-backend:${JOB_NAME}")

        echo "Tagging Image ${REPO_NAME}-frontend-static:${JOB_NAME}..."
        openshift.tag("${TOOLS}/${REPO_NAME}-frontend-static:${JOB_NAME}", "${REPO_NAME}-frontend-static:${JOB_NAME}")
        echo "Processing DeploymentConfig ${REPO_NAME}-backend..."
        def dcBackendTemplate = openshift.process('-f',
          'tools/openshift/backend.dc.yaml',
          "REPO_NAME=${REPO_NAME}",
          "JOB_NAME=${JOB_NAME}",
          "NAMESPACE=${projectEnv}",
          "APP_NAME=${APP_NAME}",
          "HOST_ROUTE=${hostRouteEnv}"
        )

        def dcBackend = openshift.apply(dcBackendTemplate).narrow('dc')

        echo "Processing DeploymentConfig ${REPO_NAME}-frontend-static..."
        def dcFrontendStaticTemplate = openshift.process('-f',
          'tools/openshift/frontend-static.dc.yaml',
          "REPO_NAME=${REPO_NAME}",
          "JOB_NAME=${JOB_NAME}",
          "NAMESPACE=${projectEnv}",
          "APP_NAME=${APP_NAME}",
          "HOST_ROUTE=${hostRouteEnv}"
        )

        echo "Applying Deployment ${REPO_NAME}-frontend-static..."
        def dcFrontendStatic = openshift.apply(dcFrontendStaticTemplate).narrow('dc')

        // Wait for deployments to roll out
        timeout(10) {
          parallel(
              Backend: {
                  dcBackend.rollout().status('--watch=true')
              },
              Frontend: {
                  dcFrontendStatic.rollout().status('--watch=true')
              }
          )
        }
      }
    }
  }
